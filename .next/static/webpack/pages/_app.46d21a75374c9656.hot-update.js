"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/TwitterContext.js":
/*!***********************************!*\
  !*** ./context/TwitterContext.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TwitterContext\": function() { return /* binding */ TwitterContext; },\n/* harmony export */   \"TwitterProvider\": function() { return /* binding */ TwitterProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/client */ \"./lib/client.js\");\n\nvar _s = $RefreshSig$();\n\n\n\nconst TwitterContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst TwitterProvider = (param)=>{\n    let { children  } = param;\n    _s();\n    const [appStatus, setAppStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [tweets, setTweets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletIsConnected();\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!currentAccount && appStatus == \"connected\") return;\n        getCurrentUserDetails(currentAccount);\n        fetchTweets();\n    }, [\n        currentAccount,\n        appStatus\n    ]);\n    /**\r\n   * Checks if there is an active wallet connection\r\n   */ const checkIfWalletIsConnected = async ()=>{\n        if (!window.ethereum) return setAppStatus(\"noMetaMask\");\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (addressArray.length > 0) {\n                setAppStatus(\"connected\");\n                setCurrentAccount(addressArray[0]);\n                createUserAccount(addressArray[0]);\n            } else {\n                router.push(\"/\");\n                setAppStatus(\"notConnected\");\n            }\n        } catch (err) {\n            router.push(\"/\");\n            setAppStatus(\"error\");\n        }\n    };\n    /**\r\n   * Initiates MetaMask wallet connection\r\n   */ const connectWallet = async ()=>{\n        if (!window.ethereum) return setAppStatus(\"noMetaMask\");\n        try {\n            setAppStatus(\"loading\");\n            const addressArray = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            if (addressArray.length > 0) {\n                setCurrentAccount(addressArray[0]);\n                createUserAccount(addressArray[0]);\n            } else {\n                router.push(\"/\");\n                setAppStatus(\"notConnected\");\n            }\n        } catch (err) {\n            setAppStatus(\"error\");\n        }\n    };\n    /**\r\n   * Creates an account in Sanity DB if the user does not already have one\r\n   * @param {String} userAddress Wallet address of the currently logged in user\r\n   */ const createUserAccount = async function() {\n        let userAddress = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : currentAccount;\n        if (!window.ethereum) return setAppStatus(\"noMetaMask\");\n        try {\n            const userDoc = {\n                _type: \"users\",\n                _id: userAddress,\n                name: \"Unnamed\",\n                isProfileImageNft: false,\n                profileImage: \"https://about.twitter.com/content/dam/about-twitter/en/brand-toolkit/brand-download-img-1.jpg.twimg.1920.jpg\",\n                walletAddress: userAddress\n            };\n            await _lib_client__WEBPACK_IMPORTED_MODULE_3__.client.createIfNotExists(userDoc);\n            setAppStatus(\"connected\");\n        } catch (error) {\n            router.push(\"/\");\n            setAppStatus(\"error\");\n        }\n    };\n    /**\r\n   * Generates NFT profile picture URL or returns the image URL if it's not an NFT\r\n   * @param {String} imageUri If the user has minted a profile picture, an IPFS hash; if not then the URL of their profile picture\r\n   * @param {Boolean} isNft Indicates whether the user has minted a profile picture\r\n   * @returns A full URL to the profile picture\r\n   */ const getNftProfileImage = async (imageUri, isNft)=>{\n        if (isNft) {\n            return \"https://gateway.pinata.cloud/ipfs/\".concat(imageUri);\n        } else if (!isNft) {\n            return imageUri;\n        }\n    };\n    /**\r\n   * Gets all the tweets stored in Sanity DB.\r\n   */ const fetchTweets = async ()=>{\n        const query = '\\n      *[_type == \"tweets\"]{\\n        \"author\": author->{name, walletAddress, profileImage, isProfileImageNft},\\n        tweet,\\n        timestamp\\n      }|order(timestamp desc)\\n    ';\n        // setTweets(await client.fetch(query))\n        const sanityResponse = await _lib_client__WEBPACK_IMPORTED_MODULE_3__.client.fetch(query);\n        setTweets([]);\n        /**\r\n     * Async await not available with for..of loops.\r\n     */ sanityResponse.forEach(async (item)=>{\n            const profileImageUrl = await getNftProfileImage(item.author.profileImage, item.author.isProfileImageNft);\n            if (item.author.isProfileImageNft) {\n                const newItem = {\n                    tweet: item.tweet,\n                    timestamp: item.timestamp,\n                    author: {\n                        name: item.author.name,\n                        walletAddress: item.author.walletAddress,\n                        profileImage: profileImageUrl,\n                        isProfileImageNft: item.author.isProfileImageNft\n                    }\n                };\n                setTweets((prevState)=>[\n                        ...prevState,\n                        newItem\n                    ]);\n            } else {\n                setTweets((prevState)=>[\n                        ...prevState,\n                        item\n                    ]);\n            }\n        });\n    };\n    /**\r\n   * Gets the current user details from Sanity DB.\r\n   * @param {String} userAccount Wallet address of the currently logged in user\r\n   * @returns null\r\n   */ const getCurrentUserDetails = async function() {\n        let userAccount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : currentAccount;\n        if (appStatus !== \"connected\") return;\n        const query = '\\n      *[_type == \"users\" && _id == \"'.concat(userAccount, '\"]{\\n        \"tweets\": tweets[]->{timestamp, tweet}|order(timestamp desc),\\n        name,\\n        profileImage,\\n        isProfileImageNft,\\n        coverImage,\\n        walletAddress\\n      }\\n    ');\n        const response = await _lib_client__WEBPACK_IMPORTED_MODULE_3__.client.fetch(query);\n        const profileImageUri = await getNftProfileImage(response[0].profileImage, response[0].isProfileImageNft);\n        setCurrentUser({\n            tweets: response[0].tweets,\n            name: response[0].name,\n            profileImage: profileImageUri,\n            walletAddress: response[0].walletAddress,\n            coverImage: response[0].coverImage,\n            isProfileImageNft: response[0].isProfileImageNft\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TwitterContext.Provider, {\n        value: {\n            appStatus,\n            currentAccount,\n            connectWallet,\n            tweets,\n            fetchTweets,\n            setAppStatus,\n            getNftProfileImage,\n            currentUser,\n            getCurrentUserDetails\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"D:\\\\blockchainApp\\\\social-media-blockchain\\\\context\\\\TwitterContext.js\",\n        lineNumber: 194,\n        columnNumber: 5\n    }, undefined);\n} /*import { createContext, useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { client } from \"../lib/client\";\r\n\r\nexport const TwitterContext = createContext();\r\n\r\nexport const TwitterProvider = ({ children }) => {\r\n  const [appStatus, setAppStatus] = useState(\"loading\");\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [tweets, setTweets] = useState([]);\r\n  const [currentUser, setCurrentUser] = useState({});\r\n  const router = useRouter();\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!currentAccount || appStatus !== \"connected\") return;\r\n  }, [currentAccount, appStatus]);\r\n  const checkIfWalletIsConnected = async () => {\r\n    if (!window.ethereum) return setAppStatus(\"noMetaMask\");\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        setAppStatus(\"connected\");\r\n        setCurrentAccount(addressArray[0]);\r\n        createUserAccount(addressArray[0]);\r\n      } else {\r\n        router.push(\"/\");\r\n        setAppStatus(\"notConnected\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const connectToWallet = async () => {\r\n    if (!window.ethereum) return setAppStatus(\"noMetaMask\");\r\n    try {\r\n      setAppStatus(\"loading\");\r\n\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      if (addressArray.length > 0) {\r\n        setAppStatus(\"connected\");\r\n        setCurrentAccount(addressArray[0]);\r\n        createUserAccount(addressArray[0]);\r\n      }\r\n    } catch (error) {\r\n      router.push(\"/\");\r\n      setAppStatus(\"notConnected\");\r\n    }\r\n  };\r\n\r\n  const createUserAccount = async (userAddress = currentAccount) => {\r\n    if (!window.ethereum) return setAppStatus(\"noMetaMask\");\r\n    try {\r\n      const userDoc = {\r\n        _type: \"users\",\r\n        _id: userAddress,\r\n        name: \"Unnamed\",\r\n        isProfileImageNft: false,\r\n        profileImage:\r\n          \"https://about.twitter.com/content/dam/about-twitter/en/brand-toolkit/brand-download-img-1.jpg.twimg.1920.jpg\",\r\n        walletAddress: userAddress,\r\n      };\r\n\r\n      await client.createIfNotExists(userDoc);\r\n\r\n      setAppStatus(\"connected\");\r\n    } catch (error) {\r\n      router.push(\"/\");\r\n      setAppStatus(\"error\");\r\n    }\r\n  };\r\n\r\n  const fetchTweets = async () => {\r\n    const query = `\r\n      *[_type == \"tweets\"]{\r\n        \"author\": author->{name, walletAddress, profileImage, isProfileImageNft},\r\n        tweet,\r\n        timestamp\r\n      }|order(timestamp desc)\r\n    `;\r\n\r\n    // setTweets(await client.fetch(query))\r\n\r\n    const sanityResponse = await client.fetch(query);\r\n\r\n    setTweets([]);\r\n\r\n    sanityResponse.forEach(async (item) => {\r\n      const newItem = {\r\n        tweet: item.tweet,\r\n        timestamp: item.timestamp,\r\n        author: {\r\n          name: item.author.name,\r\n          walletAddress: item.author.walletAddress,\r\n          profileImage: profileImageUrl,\r\n          isProfileImageNft: item.author.isProfileImageNft,\r\n        },\r\n      }\r\n    }); setTweets((prevState) => [...prevState, newItem]);\r\n  };\r\n\r\n  const getCurrentUserDetails = async (userAccount = currentAccount) => {\r\n    if (appStatus !== \"connected\") return;\r\n\r\n    const query = `\r\n      *[_type == \"users\" && _id == \"${userAccount}\"]{\r\n        \"tweets\": tweets[]->{timestamp, tweet}|order(timestamp desc),\r\n        name,\r\n        profileImage,\r\n        isProfileImageNft,\r\n        coverImage,\r\n        walletAddress\r\n      }\r\n    `;\r\n    const sanityResponse = await client.fetch(query);\r\n\r\n\r\n    setCurrentUser({\r\n      tweets: sanityResponse[0].tweets,\r\n      name: sanityResponse[0].name,\r\n      profileImage: sanityResponse[0].profileImage,\r\n      walletAddress: sanityResponse[0].walletAddress,\r\n      coverImage: sanityResponse[0].coverImage,\r\n      isProfileImageNft: sanityResponse[0].isProfileImageNft,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TwitterContext.Provider\r\n      value={{\r\n        appStatus,\r\n        currentAccount,\r\n        connectToWallet,\r\n        fetchTweets,\r\n        tweets,\r\n        currentUser,\r\n        getCurrentUserDetails,\r\n      }}\r\n    >\r\n      {children}\r\n    </TwitterContext.Provider>\r\n  );\r\n};\r\n*/ ;\n_s(TwitterProvider, \"XMRrjjJ5Ehnjf1MnQ977oVSA/Gk=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = TwitterProvider;\nvar _c;\n$RefreshReg$(_c, \"TwitterProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./context/TwitterContext.js\n"));

/***/ })

});